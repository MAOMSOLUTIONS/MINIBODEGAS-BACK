from sqlalchemy import Integer, String, Column, Float, DateTime, ForeignKey, func
from sqlalchemy.orm import relationship
from datetime import datetime
from ..database import db


class Asset(db.Model):
    id_asset = db.Column(Integer, primary_key=True)
    id_property = db.Column(Integer, ForeignKey('property.id_property'), nullable=False)
    property = db.relationship('Property', backref='assets')
    asset_number = db.Column(String(50), nullable=False)
    asset_name = db.Column(String(100), nullable=False)
    asset_front = db.Column(Float, nullable=False)
    asset_depth = db.Column(Float, nullable=False)
    asset_height = db.Column(Float, nullable=False)
    asset_m2 = db.Column(Float, nullable=False)
    asset_m3 = db.Column(Float, nullable=False)
    asset_comments = db.Column(db.Text, nullable=True)
    asset_photo1 = db.Column(String(255), nullable=True)
    asset_photo2 = db.Column(String(255), nullable=True)
    asset_photo3 = db.Column(String(255), nullable=True)
    asset_photo4 = db.Column(String(255), nullable=True)
    asset_photo5 = db.Column(String(255), nullable=True)
    asset_type = db.Column(Integer, ForeignKey('asset_type.id_asset_type'), nullable=False)
    asset_type_rel = db.relationship('AssetType', backref='assets')
    asset_status = db.Column(Integer, ForeignKey('asset_status.id_status'), nullable=False)
    asset_status_rel = db.relationship('AssetStatus', backref='assets')
    created_at = db.Column(DateTime(timezone=True), default=func.now())
    updated_at = db.Column(DateTime(timezone=True), onupdate=func.now())
    def to_dict(self):
        return {
            'id_asset': self.id_asset,
            'asset_number': self.asset_number,
            'asset_name': self.asset_name,
            'asset_front': self.asset_front,
            'asset_depth': self.asset_depth,
            'asset_height': self.asset_height,
            'asset_m2': self.asset_m2,
            'asset_m3': self.asset_m3,
            'asset_status': self.asset_status,
            'created_at': self.created_at,
            'updated_at': self.updated_at,
            # Agrega otros campos que quieras incluir en el dict
        }
